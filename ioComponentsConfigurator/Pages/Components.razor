@page "/components"
@using ioComponentsConfigurator.Models;

<style>
    body {
        background-color: #e8e8e8;
    }

    article[b-xugrhhbrxv] {
        padding: 0px !important
    }

    .top-row[b-xugrhhbrxv] {
        z-index: 1101
    }
</style>

<MudDrawerContainer Class="mud-height-full">

    <MudDrawer @bind-Open="@openRight" Fixed="false" Anchor="Anchor.Right" Elevation="1" Variant="@DrawerVariant.Persistent" Width="calc((100% - 250px) / 2)" Style="margin:-24px">
        <div style="padding:12px">
            <h2 style="padding:12px">@SelectedTitle</h2>

            <MudDataGrid T="ComponentPart" Items="@ComponentParts" Bordered="true">
                <Columns>
                    <Column T="ComponentPart" Field="Name" />
                    <Column T="ComponentPart" Field="Type" />
                    <Column T="ComponentPart" Field="DeviceId" />
                    <Column T="ComponentPart" Field="Index" />
                </Columns>
            </MudDataGrid>

            <MudButton OnClick="@SaveNewData" class="d-flex justify-right align-right" style="margin-top:24px">Ok</MudButton>
        </div>
    </MudDrawer>


    <MudTable T="Component" Items="@ComponentsList" OnRowClick="@RowClicked" B Bordered="true" style="margin:24px">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Components</MudText>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 200px;" />
            <col />
        </ColGroup>

        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Name</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.Name</MudTd>
        </RowTemplate>

    </MudTable>


</MudDrawerContainer>



@code
{
    public string? SelectedTitle { get; set; }

    private IEnumerable<Component> ComponentsList = new List<Component>();

    private IEnumerable<ComponentPart>? ComponentParts = new List<ComponentPart>();

    protected override Task OnInitializedAsync()
    {
        ComponentsList = new List<Component>()
        {
            new Component() {
                Id = 1,
                Name = "Bariera intrare",
                Parts = new List<ComponentPart>()
                {
                    new ComponentPart() { Name = "Senzor", Type = ioInterfaceType.DigitalInputChannels, DeviceId = 4, Index = 0}
                }
            },
            new Component() {
                Id = 2,
                Name = "Usa",
                          Parts = new List<ComponentPart>()
                {
                    new ComponentPart() { Name = "Senzor", Type = ioInterfaceType.DigitalInputChannels, DeviceId = 4, Index = 0},
                    new ComponentPart() { Name = "Lock", Type = ioInterfaceType.RelayChannels, DeviceId = 4, Index = 0}
                }
            }
        };

        return Task.CompletedTask;
    }

    bool openRight = false;
    void ToggleRightDrawer()
    {
        openRight = !openRight;
    }

    // events
    void RowClicked(TableRowClickEventArgs<Component> args)
    {
        // _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");

        SelectedTitle = args.Item.Name;
        ComponentParts = args.Item.Parts;
        openRight = true;
    }

    void SaveNewData()
    {
        openRight = false;
    }

}