@page "/devices"

<style>
    body {
        background-color: #e8e8e8;
    }

    article[b-xugrhhbrxv] {
        padding: 0px !important
    }

    .top-row[b-xugrhhbrxv] {
        z-index: 1101
    }
</style>

@using System.Net.Http.Json
@using ioComponentsConfigurator.Models;


<MudDrawerContainer Class="mud-height-full ">

    <MudDrawer @bind-Open="@openRight" Fixed="false" Anchor="Anchor.Right" Elevation="4" Variant="@DrawerVariant.Persistent" Width="calc((100% - 250px) / 2)" Style="margin:-24px">
        <div style="padding:12px">
            <h2 style="padding:12px">@SelectedTitle</h2>

            <MudDataGrid T="InterfaceSpecs" Items="@SpecsList" Bordered="true">
                <Columns>
                    <Column  Resizable=true style="width:100px" T="InterfaceSpecs" Field="Type" />
                    <Column T="InterfaceSpecs" Field="Count" Title="Type" />
                </Columns>
            </MudDataGrid>

            <MudButton OnClick="@SaveNewData" class="d-flex justify-right align-right" style="margin-top:24px">Ok</MudButton>
        </div>
    </MudDrawer>


    <MudTable T="Device" Items="@HardwaresList" OnRowClick="@RowClicked" Bordered="true" style="margin:24px">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Hardware</MudText>
        </ToolBarContent>

        <ColGroup>
            <col style="width: 200px;" />
            <col />
        </ColGroup>

        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Device name</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Sign">@context.Name</MudTd>
        </RowTemplate>

    </MudTable>


</MudDrawerContainer>




@code
{
    public string? SelectedTitle { get; set; }

    private IEnumerable<Device> HardwaresList = new List<Device>();

    private IEnumerable<InterfaceSpecs> SpecsList = new List<InterfaceSpecs>();

    private IEnumerable<Element> Elements = new List<Element>()
    {
        new Element() { Number = 1, Sign = "H"  },
        new Element() { Number = 2, Sign = "He"},
        new Element() { Number = 3, Sign = "Li" }
    };

    public class Element {
        public int Number { get; set; }
        public string Sign { get; set; }
    }

    protected override Task OnInitializedAsync()
    {
        DeviceModel e1214 = new DeviceModel()
        {
            Name = "e1214",
            Specs = new List<InterfaceSpecs>()
            {
                new InterfaceSpecs() { Type = ioInterfaceType.DigitalInputChannels,  Count = 6 },
                new InterfaceSpecs() { Type = ioInterfaceType.RelayChannels,  Count = 6 }
            }
        };

        HardwaresList = new List<Device>()
        {
            new Device() {
                Id = 1,
                Name = "Panou intrare",
                Model = e1214
            }, 
            new Device()
            {
                Id = 2,
                Name = "Panou iesire",
                Model = e1214
            }
        };

        return Task.CompletedTask;
    }

    bool openRight = false;
    void ToggleRightDrawer()
    {
        openRight = !openRight;
    }

    // events
    void RowClicked(TableRowClickEventArgs<Device> args)
    {
        // _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");

        SelectedTitle = args.Item.Name;
        SpecsList = args.Item.Model.Specs;
        openRight = true;
    }


    void SaveNewData()
    {
        openRight = false;
    }

}
