@page "/templates"
@using System.Net.Http.Json
@using ioComponentsConfigurator.Models;

<h3>Templates</h3>

<MudDrawerContainer Class="mud-height-full">

    <MudDrawer @bind-Open="@openRight" Fixed="false" Anchor="Anchor.Right" Elevation="1" Variant="@DrawerVariant.Persistent" Width="calc((100% - 250px) / 2)">
        <div style="padding:12px">
            <h2 style="padding:12px">@SelectedTitle</h2>

            <MudDataGrid T="TemplateProperty" Items="@TemplateProperties" Bordered="true">
                <Columns>
                    <Column T="TemplateProperty" Field="Name"  />
                    <Column T="TemplateProperty" Field="InterfaceType" Title="Type" />
                </Columns>
            </MudDataGrid>

            <MudButton OnClick="@SaveNewData" class="d-flex justify-right align-right" style="margin-top:24px" >Ok</MudButton>
        </div>
    </MudDrawer>


    <MudDataGrid T="Template" Items="@TemplatesList" RowClick="@RowClicked" Bordered="true">
        <Columns>
            <Column T="Template" Field="Id" />
            <Column T="Template" Field="Name" Title="Template name" />
        </Columns>
    </MudDataGrid>


</MudDrawerContainer>



@code
{
    public string? SelectedTitle { get; set; }

    private IEnumerable<Template> TemplatesList = new List<Template>();

    private IEnumerable<TemplateProperty> TemplateProperties = new List<TemplateProperty>();

    protected override Task OnInitializedAsync()
    {
        TemplatesList = new List<Template>()
        {
            new Template() { 
                Id = 1, 
                Name = "Bariera tip 1",
                Properties = new List<TemplateProperty>()
                {
                    new TemplateProperty() { Name = "Senzor bariera" , InterfaceType = ioInterfaceType.DigitalInputChannels }
                }
            },
            new Template() { 
                Id = 2, 
                Name = "Usa",
                Properties = new List<TemplateProperty>()
                {
                    new TemplateProperty() { Name = "Contact" , InterfaceType = ioInterfaceType.DigitalInputChannels },
                    new TemplateProperty() { Name = "Lock" , InterfaceType = ioInterfaceType.RelayChannels }
                }
            },
            new Template() { Id = 3, Name = "Bariera tip 2" },
            new Template() { Id = 4, Name = "Poarta mecanica" }
        };

        return Task.CompletedTask;
    }

    bool openRight = false;
    void ToggleRightDrawer()
    {
        openRight = !openRight;
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<Template> args)
    {
        // _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");

        SelectedTitle = args.Item.Name;
        TemplateProperties = args.Item.Properties;
        openRight = true;
    }

    void SaveNewData()
    {
        openRight = false;
    }

}
